{"version":3,"sources":["data/Routes.ts","api/apiServices/apiService.ts","components/base/Image/index.tsx","components/FlagImage/index.tsx","components/SearchInput/index.tsx","components/CityNavigation/index.tsx","components/base/symbols/CelsiusSymbol/index.tsx","components/base/InfoCell/index.tsx","components/WeatherImage/index.tsx","components/Modal/index.tsx","api/apiServices/apiHelper.ts","api/services/weatherService.ts","services/weatherService.ts","services/dateService.ts","data/units.ts","containers/WeatherSearcherPage/redux/actionTypes/actionTypesNames.ts","components/Chart/index.tsx","components/CardDetails/index.tsx","hooks/useAppDispatch.ts","data/storage.ts","services/storageService.ts","services/idService.ts","services/cardService.ts","components/Alert/index.tsx","containers/WeatherSearcherPage/redux/actionTypes/actions.ts","containers/WeatherSearcherPage/redux/actionCreators/cards.ts","containers/WeatherSearcherPage/redux/actionCreators/weather.ts","components/Card/index.tsx","components/CardsBoard/index.tsx","hooks/useAppSelector.ts","containers/WeatherSearcherPage/redux/initialState.ts","containers/WeatherSearcherPage/index.tsx","App.tsx","containers/WeatherSearcherPage/redux/reducer.ts","store/rootReducer.ts","store/index.tsx","index.tsx"],"names":["Rotes","RequestMethods","Image","props","apiUrl","iconCode","width","altText","qualityParam","loading","src","toLowerCase","srcSet","alt","style","padding","altTextDefault","FlagImage","countryName","process","SearchInput","id","labelText","setCity","options","map","option","groupName","country","optionName","state","name","sort","a","b","toLocaleUpperCase","localeCompare","Autocomplete","groupBy","getOptionLabel","isOptionEqualToValue","value","sx","autoHighlight","renderInput","params","TextField","label","required","renderOption","Tooltip","title","coord","lat","lon","placement","arrow","describeChild","Box","component","mr","flexShrink","onChange","e","CityNavigation","cities","citiesData","useState","cityId","setCityId","addCard","handleCitySubmit","Stack","direction","justifyContent","alignItems","spacing","Button","variant","size","onClick","CelsiusSymbol","InfoCell","cellName","cellValue","unit","specialSymbol","undefined","display","flexDirection","flexWrap","Typography","color","textAlign","boxSizing","alignSelf","WeatherImage","weatherIcon","weatherName","position","top","left","transform","bgcolor","border","boxShadow","p","height","Modal","open","handleClose","children","onClose","followCursor","IconButton","callApi","args","fetch","createRequest","result","ok","json","resultJSON","Error","error","message","Request","getURL","method","type","queryStr","query","URLSearchParams","Object","assign","toString","endpoint","getRequest","apiArguments","GET","getResponse","apiHelper","response","CURRENT_WEATHER_ENDPOINT","FORECAST_WEATHER_ENDPOINT","getCityWeather","units","lang","apiService","appid","getCityForecast","cnt","list","apiWeatherService","getCityDayForecast","roundTemperature","temperature","Number","toFixed","moment","format","Metric","Imperial","createTodayUnixDate","valueOf","actionTypesNames","pointColor","point","labelContent","ChartContainer","data","overflow","Chart","field","categoryField","highField","autoFit","margin","noteTextField","content","text","baseUnit","visible","labels","rotation","line","userUnit","CardDetails","card","weather","weatherService","main","temp","tempFeelsLike","feels_like","tempMin","temp_min","tempMax","temp_max","chartData","forecast","forecastItem","time","date","dt","unix","city","overflowY","maxHeight","marginTop","mt","pressure","sea_level","grnd_level","humidity","visibility","clouds","all","wind","speed","windSpeed","windGust","rain","snow","useAppDispatch","useDispatch","storage","sessionStorage","NOT_FOUND_ERROR_MESSAGE","save","getItem","setItem","JSON","stringify","createdAt","updatedAt","isSaved","cardId","remove","removeItem","extractSavedAllCards","isEmptyStorage","entries","reduce","accumulator","storageKey","storageValue","validate","push","parse","length","getCity","find","createCard","uuidv4","now","dateService","isCreatedCard","cards","AlertType","actionTypes","CARD_ADD_REQUEST","payload","addCardSuccess","notification","CARD_ADD_SUCCESS","addCardError","errorMessage","CARD_ADD_ERROR","deleteCard","CARD_DELETE_REQUEST","deleteCardSuccess","CARD_DELETE_SUCCESS","WEATHER_GET_REQUEST","getCityWeatherSuccess","WEATHER_GET_SUCCESS","getWeatherForecast","WEATHER_FORECAST_GET_REQUEST","getWeatherForecastSuccess","WEATHER_FORECAST_GET_SUCCESS","dispatch","cardService","actions","storageService","CARD_DELETE_ERROR","collapseError","COLLAPSE_ERROR","collapseNotification","COLLAPSE_NOTIFICATION","WEATHER_FORECAST_GET_ERROR","WeatherCard","openModal","setOpenModal","onDeleteHandler","window","confirm","actionsCard","onUpdateHandler","actionWeather","onDetailsHandler","maxWidth","Card","CardContent","paddingBottom","fromNow","cursor","paddingInlineEnd","icon","mb","description","CardsBoard","minHeight","Grid","container","flex","useAppSelector","useSelector","initialState","notificationMessage","Alert","isShown","onCollapse","Collapse","in","severity","action","fontSize","AlertTitle","toUpperCase","WeatherSearcherPage","weatherSearcherReducer","useEffect","forEach","actionsWeather","marginBlockEnd","right","bottom","Success","App","path","HOME","element","WEATHER_PAGE","filter","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.5c98b87a.chunk.js","sourcesContent":["enum Rotes {\n  HOME = '/weather-search',\n  WEATHER_PAGE = '/weather-search/weather',\n}\n\nexport default Rotes;\n","import IRequestArgument from '../interfaces/IRequestArguments';\nimport IWeather from '../../interfaces/IWeather';\nimport * as apiHelper from './apiHelper';\nimport IForecastResponse from '../interfaces/IForecastResponse';\n\nexport enum RequestMethods {\n  GET = 'GET',\n}\n\nexport const getRequest = async (args: IRequestArgument): Promise<IWeather | IForecastResponse> => {\n  const apiArguments: IRequestArgument = {\n    ...args,\n    type: RequestMethods.GET,\n  };\n  return await getResponse(apiArguments);\n};\n\nconst getResponse = async (apiArguments: IRequestArgument): Promise<IWeather | IForecastResponse> => {\n  const response: Response = await apiHelper.callApi(apiArguments);\n  return await response.json();\n};\n","import * as React from 'react';\n\nconst widthDefault = 20;\nconst altDefault = 'icon image';\n\nexport interface IFlagImage {\n  iconCode: string;\n  apiUrl: string;\n  width?: number;\n  altText?: string;\n  qualityParam?: string;\n}\n\nconst Image = (props: IFlagImage): JSX.Element => {\n  const { apiUrl, iconCode, width, altText, qualityParam } = props;\n\n  return (\n    <img\n      loading=\"lazy\"\n      width={width ?? widthDefault}\n      src={`${apiUrl}${iconCode?.toLowerCase()}${qualityParam ? qualityParam : ''}.png`}\n      srcSet={`${apiUrl}${iconCode?.toLowerCase()}${qualityParam ? qualityParam : ''}.png 2x`}\n      alt={altText ?? altDefault}\n      style={{ padding: '3px' }}\n    />\n  );\n};\n\nexport default Image;\n","import * as React from 'react';\nimport Image from '../base/Image';\n\nconst widthDefault = 20;\nconst altTextDefault = 'flag icon';\n\nexport interface IFlagImage {\n  iconCode: string;\n  width?: number;\n  countryName?: string;\n}\n\nconst FlagImage = (props: IFlagImage): JSX.Element => {\n  const { iconCode, width, countryName } = props;\n  const altText = countryName ? `${countryName} ${altTextDefault}` : altTextDefault;\n\n  return (\n    <>\n      {iconCode ? (\n        <Image\n          iconCode={iconCode}\n          width={width ?? widthDefault}\n          apiUrl={process.env.REACT_APP_FLAG_API_URL}\n          altText={altText}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default FlagImage;\n","import * as React from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport Tooltip from '@mui/material/Tooltip';\nimport ICity from '../../interfaces/ICity';\nimport FlagImage from '../FlagImage';\n\nexport interface ISearchInputProps {\n  id: string;\n  options: Array<ICity>;\n  labelText: string;\n  setCity: (id: number) => void;\n}\n\ninterface IAutocompleteOption extends ICity {\n  optionName: string;\n  groupName: string;\n}\n\nconst SearchInput = (props: ISearchInputProps): JSX.Element => {\n  const { id, labelText, setCity } = props;\n  const options: IAutocompleteOption[] = props.options.map((option) => {\n    const groupName = option.country;\n    const optionName = option.state ? `${option.name} (${option.state})` : `${option.name}`;\n    return {\n      optionName,\n      groupName,\n      ...option,\n    };\n  });\n\n  options.sort((a, b) => -b.groupName.toLocaleUpperCase().localeCompare(a.groupName.toLocaleUpperCase()));\n\n  const handleCityChange = (e: React.SyntheticEvent<Element, Event>, value: IAutocompleteOption | null): void => {\n    if (value) {\n      setCity(value.id);\n    }\n  };\n  return (\n    <Autocomplete\n      id={id}\n      options={options}\n      groupBy={(option) => option.groupName}\n      getOptionLabel={(option) => option.optionName}\n      isOptionEqualToValue={(option, value) => value && option.id === value.id}\n      sx={{ width: 400 }}\n      autoHighlight\n      renderInput={(params) => <TextField {...params} label={labelText} required />}\n      renderOption={(props, option) => (\n        <Tooltip\n          title={`${option.coord.lat}; ${option.coord.lon}`}\n          placement=\"right-start\"\n          arrow\n          describeChild\n          key={option.id}\n        >\n          <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} {...props}>\n            <FlagImage iconCode={option.country} countryName={option.country} />\n            {option.optionName}\n          </Box>\n        </Tooltip>\n      )}\n      onChange={handleCityChange}\n    />\n  );\n};\n\nexport default SearchInput;\n","import React, { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\n\nimport SearchInput from '../SearchInput';\nimport ICity from '../../interfaces/ICity';\nimport citiesData from '../../data/city.list.json';\n\nexport interface ICityNavigation {\n  addCard: (cityId: number) => Promise<void>;\n}\n\nconst BUTTON_CONTENT = 'GO';\n\nconst CityNavigation = (props: ICityNavigation): JSX.Element => {\n  const cities = citiesData as Array<ICity>;\n  const [cityId, setCityId] = useState<number>();\n\n  const { addCard } = props;\n\n  const handleCitySubmit = async (): Promise<void> => {\n    if (cityId) {\n      addCard(cityId);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        padding: 5,\n      }}\n    >\n      <Stack direction=\"row\" justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n        <SearchInput id={'city-input'} options={cities} labelText={'Input city name'} setCity={setCityId} />\n        <Button variant=\"contained\" size=\"large\" onClick={handleCitySubmit}>\n          {BUTTON_CONTENT}\n        </Button>\n      </Stack>\n    </Box>\n  );\n};\n\nexport default CityNavigation;\n","import React from 'react';\n\nconst CelsiusSymbol = (): JSX.Element => {\n  return <span>&#8451;</span>;\n};\n\nexport default CelsiusSymbol;\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\n\nexport interface IInfoCell {\n  cellName: string;\n  cellValue?: number | string;\n  unit?: string;\n  specialSymbol?: React.ReactNode;\n}\n\nconst InfoCell = (props: IInfoCell): JSX.Element => {\n  const { cellName, cellValue, unit, specialSymbol } = props;\n  return (\n    <>\n      {cellValue === undefined ? null : (\n        <Box style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap' }}>\n          <Typography\n            component=\"span\"\n            color=\"text.secondary\"\n            style={{ padding: 5, width: '60%', textAlign: 'start', boxSizing: 'border-box', alignSelf: 'center' }}\n          >\n            {cellName}\n          </Typography>\n          <Typography\n            component=\"span\"\n            style={{ padding: 5, width: '40%', textAlign: 'start', boxSizing: 'border-box', alignSelf: 'center' }}\n          >\n            <Typography component=\"span\" style={{ padding: 5 }}>\n              {cellValue}\n            </Typography>\n            <Typography component=\"span\" style={{ padding: 5 }}>\n              {unit ?? specialSymbol}\n            </Typography>\n          </Typography>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default InfoCell;\n","import * as React from 'react';\nimport Image from '../base/Image';\n\nconst weatherWidth = 100;\nconst altTextDefault = 'weather icon';\nconst qualityParam = '@2x';\n\nexport interface IWeatherImage {\n  weatherIcon?: string;\n  weatherName?: string;\n}\n\nconst WeatherImage = (props: IWeatherImage): JSX.Element => {\n  const { weatherIcon, weatherName } = props;\n  const altText = weatherName ? `${weatherName} ${altTextDefault}` : altTextDefault;\n\n  return (\n    <>\n      {weatherIcon ? (\n        <Image\n          iconCode={weatherIcon}\n          width={weatherWidth}\n          apiUrl={process.env.REACT_APP_WEATHER_ICON_API_URL}\n          altText={altText}\n          qualityParam={qualityParam}\n        />\n      ) : null}\n    </>\n  );\n};\n\nexport default WeatherImage;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Tooltip from '@mui/material/Tooltip';\nimport MUI_Modal from '@mui/material/Modal';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\n\nconst style = {\n  // TODO add to styles.css file\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 800,\n  bgcolor: 'background.paper',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n  height: '75%',\n};\n\nconst BUTTON_CLOSE_TITLE = 'Close';\n\nexport interface IModal {\n  open: boolean;\n  handleClose: () => void;\n  children: React.ReactNode;\n}\n\nconst Modal = (props: IModal): JSX.Element => {\n  const { open, handleClose, children } = props;\n\n  return (\n    <MUI_Modal\n      open={open}\n      onClose={handleClose}\n      aria-labelledby=\"modal-modal-title\"\n      aria-describedby=\"modal-modal-description\"\n    >\n      <Box sx={style}>\n        <Box style={{ display: 'flex', justifyContent: 'right' }}>\n          <Tooltip title={BUTTON_CLOSE_TITLE} describeChild followCursor>\n            <IconButton aria-label=\"delete\" size=\"small\" onClick={handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </Tooltip>\n        </Box>\n        <Box>{children}</Box>\n      </Box>\n    </MUI_Modal>\n  );\n};\n\nexport default Modal;\n","import IRequestArgument from '../interfaces/IRequestArguments';\n\nexport const callApi = async (args: IRequestArgument): Promise<Response> => {\n  const result: Response = await fetch(createRequest(args));\n\n  if (!result.ok) {\n    const resultJSON = await result.json();\n    throw new Error(resultJSON.error?.message);\n  }\n\n  return result;\n};\n\nconst createRequest = (args: IRequestArgument): Request => {\n  return new Request(getURL(args), {\n    method: args.type,\n  });\n};\n\nconst getURL = (args: IRequestArgument): string => {\n  const queryStr = args.query ? `?${new URLSearchParams(Object.assign(args.query)).toString()}` : '';\n  return `${args.apiUrl}${args.endpoint}${queryStr}`;\n};\n","import IWeather from '../../interfaces/IWeather';\nimport * as apiService from '../apiServices/apiService';\nimport IForecastResponse from '../interfaces/IForecastResponse';\n\nconst CURRENT_WEATHER_ENDPOINT = `/weather`;\nconst FORECAST_WEATHER_ENDPOINT = `/forecast`; // /hourly api request is in paid subscription of WeatherAPI only\n\n// units and lang parameters are set by default in this function,\n// but as the idea of upgrading this app, them can be taken from the user profile settings\nexport const getCityWeather = async (cityId: number, units = 'metric', lang = 'en'): Promise<IWeather> => {\n  const endpoint = CURRENT_WEATHER_ENDPOINT;\n  const response: IWeather = (await apiService.getRequest({\n    apiUrl: process.env.REACT_APP_WEATHER_API_URL,\n    endpoint,\n    query: {\n      id: cityId,\n      units,\n      lang,\n      appid: process.env.REACT_APP_WEATHER_APP_ID,\n    },\n  })) as IWeather;\n  return response;\n};\n\nexport const getCityForecast = async (\n  cityId: number,\n  cnt: number,\n  units = 'metric',\n  lang = 'en',\n): Promise<IWeather[]> => {\n  const endpoint = FORECAST_WEATHER_ENDPOINT;\n  const response: IForecastResponse = (await apiService.getRequest({\n    apiUrl: process.env.REACT_APP_WEATHER_API_URL,\n    endpoint,\n    query: {\n      id: cityId,\n      units,\n      lang,\n      cnt,\n      appid: process.env.REACT_APP_WEATHER_APP_ID,\n    },\n  })) as IForecastResponse;\n  return response.list;\n};\n","import IWeather from '../interfaces/IWeather';\nimport * as apiWeatherService from '../api/services/weatherService';\n\nexport const getCityWeather = async (cityId: number): Promise<IWeather> => {\n  return await apiWeatherService.getCityWeather(cityId);\n};\n\nexport const getCityDayForecast = async (cityId: number): Promise<IWeather[]> => {\n  const countForecastItems = 8;\n  return await apiWeatherService.getCityForecast(cityId, countForecastItems);\n};\n\nexport const roundTemperature = (temperature: number): string => {\n  if (temperature < 0 && Number(temperature.toFixed(0)) === 0) return '0';\n  return temperature.toFixed(0);\n};\n","import moment from 'moment';\n\nmoment().format();\n\nexport const createTodayUnixDate = (): number => moment().valueOf();\n\nexport const getTimeFrom = (date: number): string => moment(date).fromNow();\n\nexport const getTimeString = (date: number): string => moment.unix(date).format('HH:mm');\n\nexport const getTimeToNow = (date: number): string => moment(date).toNow();\n","export enum Metric {\n  windSpeed = 'meter/sec',\n  windGust = 'meter/sec',\n  temperature = 'Celsius',\n}\n\nexport enum Imperial {\n  windSpeed = 'miles/hour',\n  windGust = 'miles/hour',\n  temperature = 'Fahrenheit',\n}\n","enum actionTypesNames {\n  LOADING_SET = 'LOADING/SET',\n  COLLAPSE_ERROR = 'ERROR/COLLAPSE',\n  COLLAPSE_NOTIFICATION = 'NOTIFICATION/COLLAPSE',\n\n  //APP_ERROR = 'APP/ERROR',\n  CARDS_GET_REQUEST = 'CARDS/GET/REQUEST',\n  CARDS_GET_SUCCESS = 'CARDS/GET/SUCCESS',\n  CARDS_GET_ERROR = 'CARDS/GET/ERROR',\n\n  CARD_ADD_REQUEST = 'CARD/ADD/REQUEST',\n  CARD_ADD_SUCCESS = 'CARD/ADD/SUCCESS',\n  CARD_ADD_ERROR = 'CARD/ADD/ERROR',\n\n  CARD_DELETE_REQUEST = 'CARD/DELETE/REQUEST',\n  CARD_DELETE_SUCCESS = 'CARD/DELETE/SUCCESS',\n  CARD_DELETE_ERROR = 'CARD/DELETE/ERROR',\n\n  WEATHER_GET_REQUEST = 'WEATHER/GET/REQUEST',\n  WEATHER_GET_SUCCESS = 'WEATHER/GET/SUCCESS',\n  WEATHER_GET_ERROR = 'WEATHER/GET/ERROR',\n\n  WEATHER_FORECAST_GET_REQUEST = 'WEATHER/FORECAST/GET/REQUEST',\n  WEATHER_FORECAST_GET_SUCCESS = 'WEATHER/FORECAST/GET/SUCCESS',\n  WEATHER_FORECAST_GET_ERROR = 'WEATHER/FORECAST/GET/ERROR',\n}\n\nexport default actionTypesNames;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport {\n  Chart,\n  ChartCategoryAxis,\n  ChartCategoryAxisItem,\n  ChartSeries,\n  ChartSeriesItem,\n  ChartSeriesLabels,\n} from '@progress/kendo-react-charts';\n\nimport 'hammerjs';\nimport IChartDataItem from '../../interfaces/IChartDataItem';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst pointColor = (point: any) => {\n  if (point.value >= 0) {\n    return 'green';\n  } else {\n    return 'blue';\n  }\n};\n\nexport interface IChartContainer {\n  data: Array<IChartDataItem>;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst labelContent = (e: any) => `${e.value.toFixed(0)} °C`;\n\nconst ChartContainer = (props: IChartContainer): JSX.Element => {\n  const { data } = props;\n  return (\n    <>\n      {!data ? null : (\n        <Box style={{ height: 'fit-context', overflow: 'visible' }}>\n          <Chart style={{ height: 'fit-context', width: '100%', overflow: 'visible' }}>\n            <ChartSeries>\n              <ChartSeriesItem\n                type=\"line\"\n                data={data}\n                color={pointColor}\n                field=\"temp\"\n                categoryField=\"time\"\n                highField=\"fit-context\"\n                autoFit={true}\n                margin={10}\n                style=\"normal\"\n                noteTextField=\"time\"\n              >\n                <ChartSeriesLabels color=\"black\" position=\"left\" content={labelContent} />\n              </ChartSeriesItem>\n            </ChartSeries>\n\n            <ChartCategoryAxis>\n              <ChartCategoryAxisItem\n                title={{ text: 'Time', color: 'LightGray' }}\n                baseUnit=\"hours\"\n                visible={true}\n                labels={{ rotation: 60, color: 'LightGray' }}\n                line={{ color: 'LightGray', visible: true }}\n              />\n            </ChartCategoryAxis>\n          </Chart>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default ChartContainer;\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport FlagImage from '../FlagImage/index';\n\nimport InfoCell from '../base/InfoCell';\nimport CelsiusSymbol from '../base/symbols/CelsiusSymbol';\nimport ICard from '../../interfaces/ICard';\nimport * as weatherService from '../../services/weatherService';\nimport * as dateService from '../../services/dateService';\nimport { Metric } from '../../data/units';\nimport Chart from '../Chart';\nimport IChartDataItem from '../../interfaces/IChartDataItem';\n\nconst userUnit = Metric; // set it in user settings\n\nexport interface ICardDetails {\n  card: ICard;\n}\n\nconst FORECAST_BOX_TITLE = 'Tomorrow temperature forecast';\nconst DETAILED_BOX_TITLE = 'Detailed weather data';\n\nconst CardDetails = (props: ICardDetails): JSX.Element => {\n  const { card } = props;\n\n  const temperature = card.weather ? weatherService.roundTemperature(card.weather?.main.temp) : undefined;\n  const tempFeelsLike = card.weather ? weatherService.roundTemperature(card.weather?.main.feels_like) : undefined;\n  const tempMin = card.weather ? weatherService.roundTemperature(card.weather?.main.temp_min) : undefined;\n  const tempMax = card.weather ? weatherService.roundTemperature(card.weather?.main.temp_max) : undefined;\n\n  const chartData: IChartDataItem[] = card.forecast?.map((forecastItem) => ({\n    time: dateService.getTimeString(forecastItem.dt),\n    temp: forecastItem.main.temp,\n  })) as IChartDataItem[];\n\n  return (\n    <Box>\n      <Box style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-start' }}>\n        <FlagImage iconCode={card.city.country} countryName={card.city.country} width={40} />\n        <Typography variant=\"h6\" style={{ padding: '2px' }}>\n          {card.city.name}\n        </Typography>\n      </Box>\n      <Box style={{ overflowY: 'auto', maxHeight: '65vh', marginTop: '15px' }}>\n        <Typography id=\"modal-modal-title\" component=\"span\" variant=\"h6\">\n          {FORECAST_BOX_TITLE}\n        </Typography>\n        <Box>\n          <Chart data={chartData} />\n        </Box>\n        <Typography id=\"modal-modal-title\" component=\"span\" variant=\"h6\">\n          {DETAILED_BOX_TITLE}\n        </Typography>\n        <Typography id=\"modal-modal-description\" component=\"span\" sx={{ mt: 2 }}>\n          <InfoCell cellName=\"Temperature\" cellValue={temperature} specialSymbol={<CelsiusSymbol />} />\n          <InfoCell cellName=\"Feels like\" cellValue={tempFeelsLike} specialSymbol={<CelsiusSymbol />} />\n          <InfoCell cellName=\"Temperature min\" cellValue={tempMin} specialSymbol={<CelsiusSymbol />} />\n          <InfoCell cellName=\"Temperature max\" cellValue={tempMax} specialSymbol={<CelsiusSymbol />} />\n          <InfoCell cellName=\"Atmospheric pressure\" cellValue={card.weather?.main.pressure} unit={'hPa'} />\n          <InfoCell\n            cellName=\"Atmospheric pressure on the sea level\"\n            cellValue={card.weather?.main.sea_level}\n            unit={'hPa'}\n          />\n          <InfoCell\n            cellName=\"Atmospheric pressure on the ground level\"\n            cellValue={card.weather?.main.grnd_level}\n            unit={'hPa'}\n          />\n          <InfoCell cellName=\"Humidity\" cellValue={card.weather?.main.humidity} unit={'%'} />\n          <InfoCell cellName=\"Visibility\" cellValue={card.weather?.visibility} unit={'m'} />\n          <InfoCell cellName=\"Cloudiness\" cellValue={card.weather?.clouds?.all} unit={'%'} />\n          <InfoCell cellName=\"Wind speed\" cellValue={card.weather?.wind?.speed} unit={userUnit.windSpeed} />\n          <InfoCell cellName=\"Wind direction\" cellValue={card.weather?.wind?.speed} unit={'degrees'} />\n          <InfoCell cellName=\"Wind gust\" cellValue={card.weather?.wind?.speed} unit={userUnit.windGust} />\n          <InfoCell cellName=\"Rain volume for the last 1 hour\" cellValue={card.weather?.rain?.['1h']} unit={'mm'} />\n          <InfoCell cellName=\"Rain volume for the last 3 hours\" cellValue={card.weather?.rain?.['3h']} unit={'mm'} />\n          <InfoCell cellName=\"Snow volume for the last 1 hour\" cellValue={card.weather?.snow?.['3h']} unit={'mm'} />\n          <InfoCell cellName=\"Snow volume for the last 3 hours\" cellValue={card.weather?.snow?.['3h']} unit={'mm'} />\n        </Typography>\n      </Box>\n    </Box>\n  );\n};\n\nexport default CardDetails;\n","import { useDispatch } from 'react-redux';\nimport type { AppDispatch } from '../store';\n\nconst useAppDispatch: () => AppDispatch = useDispatch;\n\nexport default useAppDispatch;\n","const storage: Storage = sessionStorage; //another possible variant is localStorage\n\nexport default storage;\n","import ICard from '../interfaces/ICard';\nimport storage from '../data/storage';\nimport * as idService from './idService';\n\nconst NOT_FOUND_ERROR_MESSAGE = 'The card not found';\nconst IS_EMPTY_ERROR_MESSAGE = 'The storage is empty';\n\nexport const save = (card: ICard): void => {\n  if (!storage.getItem(card.id)) {\n    storage.setItem(\n      card.id,\n      JSON.stringify({\n        id: card.id,\n        city: { ...card.city },\n        createdAt: card.createdAt,\n        updatedAt: card.updatedAt,\n      }),\n    );\n  }\n};\n\nexport const isSaved = (cardId: string): boolean => {\n  return !!storage.getItem(cardId);\n};\n\nexport const remove = (cardId: string): void => {\n  if (!isSaved(cardId)) {\n    throw new Error(NOT_FOUND_ERROR_MESSAGE);\n  }\n  storage.removeItem(cardId);\n};\n\nexport const extractSavedCard = (cardId: string): ICard => {\n  if (!isSaved(cardId)) {\n    throw new Error(NOT_FOUND_ERROR_MESSAGE);\n  }\n  const extractedCardJSON = storage.getItem(cardId) as string;\n  return JSON.parse(extractedCardJSON);\n};\n\nexport const extractSavedAllCards = (): ICard[] => {\n  if (isEmptyStorage()) {\n    throw new Error(IS_EMPTY_ERROR_MESSAGE);\n  }\n\n  const cards: ICard[] = Object.entries(storage).reduce<ICard[]>((accumulator, [storageKey, storageValue]) => {\n    if (idService.isValidId(storageKey)) {\n      accumulator.push(JSON.parse(storageValue));\n    }\n    return accumulator;\n  }, [] as ICard[]);\n  return cards;\n};\n\nexport const isEmptyStorage = (): boolean => {\n  return storage.length === 0;\n};\n","import { v4 as uuidv4 } from 'uuid';\nimport validate from 'uuid-validate';\n\nexport const createId = (): string => uuidv4();\n\nexport const isValidId = (id: string): boolean => validate(id, 4);\n","import ICity from '../interfaces/ICity';\nimport ICard from '../interfaces/ICard';\nimport citiesData from '../data/city.list.json';\nimport * as idService from './idService';\nimport * as dateService from './dateService';\nimport * as storageService from './storageService';\n\nconst NOT_FOUND_ERROR_MESSAGE = 'The city not Found';\n\nexport const getCity = async (cityId: number): Promise<ICity> => {\n  const cities = citiesData as Array<ICity>;\n  const city = cities.find((city) => city.id === cityId);\n  if (!city) {\n    throw new Error(NOT_FOUND_ERROR_MESSAGE);\n  }\n  return city;\n};\n\nexport const createCard = async (cityId: number): Promise<ICard> => {\n  const id = idService.createId();\n  const city: ICity = await getCity(cityId);\n  const now: number = dateService.createTodayUnixDate();\n\n  return {\n    id,\n    city,\n    createdAt: now,\n    updatedAt: now,\n  };\n};\n\nexport const isCreatedCard = (cards: ICard[], cityId: number): boolean => {\n  return !!cards.find((card) => card.city.id === cityId);\n};\n\nexport const getSavedCards = (): ICard[] => {\n  if (storageService.isEmptyStorage()) {\n    return [];\n  }\n  return storageService.extractSavedAllCards();\n};\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Collapse from '@mui/material/Collapse';\nimport MUI_Alert from '@mui/material/Alert';\nimport AlertTitle from '@mui/material/AlertTitle';\nimport IconButton from '@mui/material/IconButton';\nimport CloseIcon from '@mui/icons-material/Close';\n\nexport enum AlertType {\n  Error = 'error',\n  Success = 'success',\n  Info = 'info',\n  Warning = 'warning',\n}\nexport interface IAlert {\n  type: AlertType;\n  message: string | null;\n  isShown: boolean;\n  onCollapse: () => void;\n}\n\nconst Alert = (props: IAlert): JSX.Element => {\n  const { type, message, isShown, onCollapse } = props;\n\n  const handleCollapse = () => {\n    onCollapse();\n  };\n\n  return (\n    <Box sx={{ width: '100%', display: 'flex', justifyContent: 'right' }}>\n      <Collapse in={isShown}>\n        <MUI_Alert\n          severity={type}\n          action={\n            <IconButton aria-label=\"close\" color=\"inherit\" size=\"small\" onClick={handleCollapse}>\n              <CloseIcon fontSize=\"inherit\" />\n            </IconButton>\n          }\n        >\n          <AlertTitle>{type.toUpperCase()}</AlertTitle>\n          {message}\n        </MUI_Alert>\n      </Collapse>\n    </Box>\n  );\n};\n\nexport default Alert;\n","import actionTypes from './actionTypesNames';\nimport IWeatherSearcherActionType from './actionsTypes';\nimport ICard from '../../../../interfaces/ICard';\nimport IWeather from '../../../../interfaces/IWeather';\n\nexport const addCard = (cityId: number): IWeatherSearcherActionType => ({\n  type: actionTypes.CARD_ADD_REQUEST,\n  payload: {\n    cityId,\n  },\n});\n\nexport const addCardSuccess = (card: ICard, notification: string): IWeatherSearcherActionType => ({\n  type: actionTypes.CARD_ADD_SUCCESS,\n  payload: {\n    card,\n    notification,\n  },\n});\n\nexport const addCardError = (errorMessage: string): IWeatherSearcherActionType => ({\n  type: actionTypes.CARD_ADD_ERROR,\n  payload: {\n    errorMessage,\n  },\n});\n\n////////////////////////////////////////////////////////////////////////////////\n\nexport const deleteCard = (cardId: string): IWeatherSearcherActionType => ({\n  type: actionTypes.CARD_DELETE_REQUEST,\n  payload: {\n    cardId,\n  },\n});\n\nexport const deleteCardSuccess = (cardId: string, notification: string): IWeatherSearcherActionType => ({\n  type: actionTypes.CARD_DELETE_SUCCESS,\n  payload: {\n    cardId,\n    notification,\n  },\n});\n\nexport const deleteCardError = (errorMessage: string): IWeatherSearcherActionType => ({\n  type: actionTypes.CARD_DELETE_ERROR,\n  payload: {\n    errorMessage,\n  },\n});\n\n///////////////////////////////////////////////////////////////////////////\nexport const collapseError = (): IWeatherSearcherActionType => ({\n  type: actionTypes.COLLAPSE_ERROR,\n  payload: {},\n});\n\nexport const collapseNotification = (): IWeatherSearcherActionType => ({\n  type: actionTypes.COLLAPSE_NOTIFICATION,\n  payload: {},\n});\n\n///////////////////////////////////////////////////////////////////////////\nexport const getCityWeather = (cityId: number): IWeatherSearcherActionType => ({\n  type: actionTypes.WEATHER_GET_REQUEST,\n  payload: {\n    cityId,\n  },\n});\n\nexport const getCityWeatherSuccess = (\n  weather: IWeather,\n  cityId: number,\n  notification: string,\n): IWeatherSearcherActionType => ({\n  type: actionTypes.WEATHER_GET_SUCCESS,\n  payload: {\n    weather,\n    cityId,\n    notification,\n  },\n});\n\n///////////////////////////////////////////////////////////////////////////\n\nexport const getWeatherForecast = (cityId: number): IWeatherSearcherActionType => ({\n  type: actionTypes.WEATHER_FORECAST_GET_REQUEST,\n  payload: {\n    cityId,\n  },\n});\n\nexport const getWeatherForecastSuccess = (forecast: IWeather[], cityId: number): IWeatherSearcherActionType => ({\n  type: actionTypes.WEATHER_FORECAST_GET_SUCCESS,\n  payload: {\n    cityId,\n    forecast,\n  },\n});\n\nexport const getWeatherForecastError = (errorMessage: string): IWeatherSearcherActionType => ({\n  type: actionTypes.WEATHER_FORECAST_GET_ERROR,\n  payload: {\n    errorMessage,\n  },\n});\n","import { Dispatch } from 'redux';\nimport IWeatherSearcherActionType from '../actionTypes/actionsTypes';\nimport ICard from '../../../../interfaces/ICard';\nimport * as cardService from '../../../../services/cardService';\nimport * as weatherService from '../../../../services/weatherService';\nimport * as actions from '../actionTypes/actions';\nimport * as storageService from '../../../../services/storageService';\n\nconst CARD_CREATED_SUCCESS_NOTIFICATION = ' A new card was added';\nconst CARD_CREATED_ERROR_MESSAGE = 'A card with this city has been already created';\nconst CARD_DELETED_SUCCESS_NOTIFICATION = 'The card was deleted';\nexport const addCard =\n  (cards: ICard[], cityId: number) =>\n  async (dispatch: Dispatch<IWeatherSearcherActionType>): Promise<void> => {\n    // TODO add isLoading dispatch\n    try {\n      if (cardService.isCreatedCard(cards, cityId)) {\n        throw new Error(CARD_CREATED_ERROR_MESSAGE);\n      }\n      dispatch(actions.addCard(cityId));\n\n      const card: ICard = await cardService.createCard(cityId);\n      card.weather = await weatherService.getCityWeather(cityId);\n\n      storageService.save(card);\n      dispatch(actions.addCardSuccess(card, CARD_CREATED_SUCCESS_NOTIFICATION));\n    } catch (e) {\n      const error = e as Error;\n      dispatch(actions.addCardError(error.message));\n    }\n  };\n\nexport const deleteCard =\n  (cardId: string) =>\n  async (dispatch: Dispatch<IWeatherSearcherActionType>): Promise<void> => {\n    try {\n      dispatch(actions.deleteCard(cardId));\n      storageService.remove(cardId);\n      dispatch(actions.deleteCardSuccess(cardId, CARD_DELETED_SUCCESS_NOTIFICATION));\n    } catch (e) {\n      const error = e as Error;\n      dispatch(actions.deleteCardError(error.message));\n    }\n  };\n\nexport const collapseError =\n  () =>\n  (dispatch: Dispatch<IWeatherSearcherActionType>): void => {\n    dispatch(actions.collapseError());\n  };\n\nexport const collapseNotification =\n  () =>\n  (dispatch: Dispatch<IWeatherSearcherActionType>): void => {\n    dispatch(actions.collapseNotification());\n  };\n","import { Dispatch } from 'redux';\nimport IWeatherSearcherActionType from '../actionTypes/actionsTypes';\nimport IWeather from '../../../../interfaces/IWeather';\nimport * as weatherService from '../../../../services/weatherService';\nimport * as actions from '../actionTypes/actions';\n\nconst WEATHER_UPDATED_SUCCESS_NOTIFICATION = 'Weather was updated';\n\nexport const getCityWeather =\n  (cityId: number) =>\n  async (dispatch: Dispatch<IWeatherSearcherActionType>): Promise<void> => {\n    // TODO add isLoading dispatch\n    try {\n      dispatch(actions.getCityWeather(cityId));\n\n      const weather: IWeather = await weatherService.getCityWeather(cityId);\n      dispatch(actions.getCityWeatherSuccess(weather, cityId, WEATHER_UPDATED_SUCCESS_NOTIFICATION));\n    } catch (e) {\n      const error = e as Error;\n      dispatch(actions.addCardError(error.message));\n    }\n  };\n\nexport const getWeatherForecast =\n  (cityId: number) =>\n  async (dispatch: Dispatch<IWeatherSearcherActionType>): Promise<void> => {\n    try {\n      dispatch(actions.getWeatherForecast(cityId));\n      const forecast: IWeather[] = await weatherService.getCityDayForecast(cityId);\n      dispatch(actions.getWeatherForecastSuccess(forecast, cityId));\n    } catch (e) {\n      const error = e as Error;\n      dispatch(actions.getWeatherForecastError(error.message));\n    }\n  };\n","import React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport Tooltip from '@mui/material/Tooltip';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport UpdateOutlinedIcon from '@mui/icons-material/UpdateOutlined';\n\nimport CelsiusSymbol from '../base/symbols/CelsiusSymbol';\nimport InfoCell from '../base/InfoCell';\nimport ICard from '../../interfaces/ICard';\nimport FlagImage from '../FlagImage';\nimport WeatherImage from '../WeatherImage';\nimport Modal from '../Modal';\nimport CardDetails from '../CardDetails';\n\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport * as actionsCard from '../../containers/WeatherSearcherPage/redux/actionCreators/cards';\nimport * as actionWeather from '../../containers/WeatherSearcherPage/redux/actionCreators/weather';\n\nimport * as dateService from '../../services/dateService';\nimport * as weatherService from '../../services/weatherService';\n\nexport interface ICardProps {\n  card: ICard;\n}\n\nconst WeatherCard = (props: ICardProps): JSX.Element => {\n  const { card } = props;\n  const [openModal, setOpenModal] = useState<boolean>(false);\n\n  const dispatch = useAppDispatch();\n\n  const onDeleteHandler = async (): Promise<void> => {\n    const isDelete: boolean = window.confirm(\n      `Are you sure you want to delete card of ${card.city.name} city from your collection?`,\n    );\n    if (isDelete) {\n      await dispatch(actionsCard.deleteCard(card.id));\n    }\n  };\n  const onUpdateHandler = async (): Promise<void> => {\n    await dispatch(actionWeather.getCityWeather(card.city.id));\n  };\n  const handleOpenModal = () => setOpenModal(true);\n  const handleCloseModal = () => setOpenModal(false);\n\n  const onDetailsHandler = async (): Promise<void> => {\n    handleOpenModal();\n    await dispatch(actionWeather.getWeatherForecast(card.city.id));\n  };\n\n  const temperature = card.weather ? weatherService.roundTemperature(card.weather?.main.temp) : undefined;\n  const tempFeelsLike = card.weather ? weatherService.roundTemperature(card.weather?.main.feels_like) : undefined;\n  const tempMin = card.weather ? weatherService.roundTemperature(card.weather?.main.temp_min) : undefined;\n  const tempMax = card.weather ? weatherService.roundTemperature(card.weather?.main.temp_max) : undefined;\n\n  return (\n    <Box sx={{ maxWidth: 500, width: 300, margin: '10px', padding: '10px' }}>\n      <Card variant=\"outlined\">\n        <CardContent style={{ paddingBottom: '5px' }}>\n          <Box style={{ display: 'flex', justifyContent: 'right' }}>\n            <Tooltip title=\"Delete card\" describeChild followCursor>\n              <IconButton aria-label=\"delete\" size=\"small\" onClick={onDeleteHandler}>\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip\n              title={`Update weather. Last updated ${dateService.getTimeFrom(card.updatedAt)}`}\n              describeChild\n              followCursor\n            >\n              <IconButton aria-label=\"update\" size=\"small\" onClick={onUpdateHandler}>\n                <UpdateOutlinedIcon />\n              </IconButton>\n            </Tooltip>\n          </Box>\n          <Box onClick={onDetailsHandler} style={{ cursor: 'pointer' }}>\n            <Box style={{ display: 'flex', flexDirection: 'row', justifyContent: 'flex-start' }}>\n              <FlagImage iconCode={card.city.country} countryName={card.city.country} width={40} />\n              <Typography variant=\"h6\" style={{ padding: '2px' }}>\n                {card.city.name}\n              </Typography>\n            </Box>\n            <Box style={{ paddingInlineEnd: 5 }}>\n              <Box\n                style={{ display: 'flex', flexDirection: 'row', alignItems: 'end', textAlign: 'right', width: '100%' }}\n              >\n                <WeatherImage weatherIcon={card.weather?.weather[0].icon} weatherName={card.weather?.weather[0].main} />\n                <Box style={{ display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\n                  <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n                    {card.weather?.weather[0].description}\n                  </Typography>\n                  <Typography sx={{ mb: 1.5 }} variant=\"h4\">\n                    <Typography component=\"span\" sx={{ mb: 1.5 }} variant=\"h4\">\n                      {temperature}\n                    </Typography>\n                    <CelsiusSymbol />\n                  </Typography>\n                </Box>\n              </Box>\n            </Box>\n            <InfoCell cellName=\"Feels like\" cellValue={tempFeelsLike} specialSymbol={<CelsiusSymbol />} />\n            <InfoCell cellName=\"Temperature min\" cellValue={tempMin} specialSymbol={<CelsiusSymbol />} />\n            <InfoCell cellName=\"Temperature max\" cellValue={tempMax} specialSymbol={<CelsiusSymbol />} />\n          </Box>\n          <Modal open={openModal} handleClose={handleCloseModal}>\n            <CardDetails card={card} />\n          </Modal>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default WeatherCard;\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\n\nimport ICard from '../../interfaces/ICard';\nimport Card from '../Card/index';\n\nconst EMPTY_BOARD_NOTIFICATION = 'No cards yet. Add new city to own collection!';\n\nexport interface ICardsBoard {\n  cards: ICard[];\n}\n\nconst CardsBoard = (props: ICardsBoard): JSX.Element => {\n  const { cards } = props;\n\n  return (\n    <Box sx={{ padding: 4 }} style={{ display: 'flex', minHeight: 'min-content' }}>\n      {cards.length === 0 ? (\n        <Box style={{ width: '100%' }} minHeight=\"80vh\">\n          <Typography component=\"div\" style={{ textAlign: 'center' }}>\n            {EMPTY_BOARD_NOTIFICATION}\n          </Typography>\n        </Box>\n      ) : (\n        <Grid container spacing={1} minHeight=\"80vh\" style={{ overflowY: 'auto', flex: '1 1 auto', height: '80vh' }}>\n          {cards.map((card) => (\n            <Card card={card} key={card.id} />\n          ))}\n        </Grid>\n      )}\n    </Box>\n  );\n};\n\nexport default CardsBoard;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { RootState } from '../store';\n\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport default useAppSelector;\n","import ICard from '../../../interfaces/ICard';\nimport * as cardService from '../../../services/cardService';\n\nexport type IWeatherSearcherPageState = {\n  cards: ICard[];\n  errorMessage: string | null;\n  notificationMessage: string | null;\n};\n\nconst initialState: IWeatherSearcherPageState = {\n  cards: cardService.getSavedCards(),\n  errorMessage: null,\n  notificationMessage: null,\n};\n\nexport default initialState;\n","import React, { useEffect } from 'react';\nimport Box from '@mui/material/Box';\nimport CityNavigation from '../../components/CityNavigation';\nimport CardsBoard from '../../components/CardsBoard';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport initialState from './redux/initialState';\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport * as actionsCard from './redux/actionCreators/cards';\nimport * as actionsWeather from './redux/actionCreators/weather';\nimport Alert, { AlertType } from '../../components/Alert';\n\nconst WeatherSearcherPage = (): JSX.Element => {\n  const state = useAppSelector((state) => state.weatherSearcherReducer ?? initialState);\n\n  useEffect(() => {\n    if (state.cards.length !== 0) {\n      // The weather should be updated for each card at the first render\n      state.cards.forEach(async (card) => {\n        await dispatch(actionsWeather.getCityWeather(card.city.id));\n      });\n    }\n  }, []);\n\n  const dispatch = useAppDispatch();\n\n  const addCard = async (cityId: number): Promise<void> => {\n    await dispatch(actionsCard.addCard(state.cards, cityId));\n  };\n  const handleCollapseError = () => {\n    dispatch(actionsCard.collapseError());\n  };\n  const handleCollapseNotification = () => {\n    dispatch(actionsCard.collapseNotification());\n  };\n\n  return (\n    <>\n      <CityNavigation addCard={addCard} />\n      <CardsBoard cards={state.cards} />\n      <Box\n        sx={{\n          marginBlockEnd: 1,\n          padding: 1,\n          position: 'absolute',\n          right: '10px',\n          bottom: '10px',\n        }}\n      >\n        <Alert\n          isShown={!!state.errorMessage}\n          onCollapse={handleCollapseError}\n          type={AlertType.Error}\n          message={state.errorMessage}\n        />\n        <Alert\n          isShown={!!state.notificationMessage}\n          onCollapse={handleCollapseNotification}\n          type={AlertType.Success}\n          message={state.notificationMessage}\n        />\n      </Box>\n    </>\n  );\n};\n\nexport default WeatherSearcherPage;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Route, Routes } from 'react-router';\nimport Rotes from './data/Routes';\n\nimport WeatherSearcherPage from './containers/WeatherSearcherPage';\n\nimport './App.css';\n\nfunction App(): JSX.Element {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path={Rotes.HOME} element={<WeatherSearcherPage />} />\n        <Route path={Rotes.WEATHER_PAGE} element={<WeatherSearcherPage />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import initialState, { IWeatherSearcherPageState } from './initialState';\nimport IWeatherSearcherActionTypes from './actionTypes/actionsTypes';\nimport actionTypes from './actionTypes/actionTypesNames';\nimport * as dateService from '../../../services/dateService';\n\nconst weatherSearcherReducer = (\n  state: IWeatherSearcherPageState = initialState,\n  action: IWeatherSearcherActionTypes,\n): IWeatherSearcherPageState => {\n  switch (action.type) {\n    case actionTypes.CARD_ADD_SUCCESS:\n      return {\n        ...state,\n        errorMessage: null,\n        cards: [...state.cards, action.payload.card],\n        notificationMessage: action.payload.notification,\n      };\n    case actionTypes.CARD_DELETE_SUCCESS:\n      return {\n        ...state,\n        errorMessage: null,\n        notificationMessage: action.payload.notification,\n        cards: state.cards?.filter((card) => card.id !== action.payload.cardId),\n      };\n    case actionTypes.WEATHER_GET_SUCCESS:\n      return {\n        ...state,\n        notificationMessage: action.payload.notification,\n        cards: state.cards?.map((card) => {\n          if (card.city.id === action.payload.cityId) {\n            return { ...card, weather: action.payload.weather, updatedAt: dateService.createTodayUnixDate() };\n          }\n          return card;\n        }),\n      };\n    case actionTypes.WEATHER_FORECAST_GET_SUCCESS:\n      return {\n        ...state,\n        cards: state.cards?.map((card) => {\n          if (card.city.id === action.payload.cityId) {\n            return { ...card, forecast: action.payload.forecast };\n          }\n          return card;\n        }),\n      };\n    case actionTypes.CARD_ADD_ERROR:\n    case actionTypes.CARD_DELETE_ERROR:\n    case actionTypes.WEATHER_FORECAST_GET_ERROR:\n      return {\n        ...state,\n        errorMessage: action.payload.errorMessage,\n        notificationMessage: null,\n      };\n    case actionTypes.COLLAPSE_ERROR:\n      return {\n        ...state,\n        errorMessage: null,\n      };\n    case actionTypes.COLLAPSE_NOTIFICATION:\n      return {\n        ...state,\n        notificationMessage: null,\n      };\n    default:\n      return state;\n  }\n};\nexport default weatherSearcherReducer;\n","import { combineReducers } from 'redux';\nimport weatherSearcherReducer from '../containers/WeatherSearcherPage/redux/reducer';\n\nconst rootReducer = combineReducers({\n  weatherSearcherReducer,\n});\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\nexport default store;\n","import 'dotenv/config';\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from '../src/store/index';\nimport './index.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n);\n"],"sourceRoot":""}